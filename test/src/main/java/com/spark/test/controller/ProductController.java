package com.spark.test.controller;

import com.spark.test.payload.ProductDto;
import com.spark.test.payload.ProductsDto;
import com.spark.test.payload.SaleDto;
import com.spark.test.service.ProductPdfService;
import com.spark.test.service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RequestMapping("/api/products")
@RestController
@RequiredArgsConstructor
@Slf4j
public class ProductController {

    private final ProductService productService;
    private final ProductPdfService productPdfService;

    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "creates new product", description = "used to save products into the database")
    @ApiResponse(responseCode = "201", description = "HTTP Status 201 CREATED")
    @SecurityRequirement(name = "basicAuth")
    @PostMapping("/add")
    public ResponseEntity<ProductDto> addProduct(@Valid @RequestBody ProductDto productDto) {
        log.info("Request to add product: {}", productDto);
        ProductDto response = productService.addProduct(productDto);
        log.info("Product added successfully with ID: {}", response.getId());
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @Operation(summary = "individual product", description = "product by id")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @SecurityRequirement(name = "basicAuth")
    @GetMapping("/{id}")
    public ResponseEntity<ProductDto> getProductById(@PathVariable Long id) {
        log.info("Fetching product by ID: {}", id);
        return new ResponseEntity<>(productService.getProductById(id), HttpStatus.OK);
    }

    @Operation(summary = "get all product", description = "to list all the products")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @SecurityRequirement(name = "basicAuth")
    @GetMapping("/allProducts")
    public ResponseEntity<ProductsDto> getAllProducts(@RequestParam(defaultValue = "0") int page,
                                                      @RequestParam(defaultValue = "10") int size) {
        return new ResponseEntity<>(productService.getAllProducts(page, size), HttpStatus.OK);
    }

    @Operation(summary = "update product", description = "product by id")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "basicAuth")
    @PutMapping("/{id}")
    public ResponseEntity<ProductDto> updateProduct(@PathVariable Long id, @Valid @RequestBody ProductDto productDto) {
        log.info("Updating product with ID: {} with data: {}", id, productDto);
        return new ResponseEntity<>(productService.updateProduct(id, productDto), HttpStatus.OK);
    }

    @Operation(summary = "delete product", description = "product by id")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "basicAuth")
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable Long id) {
        log.info("Deleting product with ID: {}", id);
        productService.deleteProduct(id);
        log.info("Product with ID: {} deleted successfully", id);
        return ResponseEntity.ok("Deleted");
    }

    @Operation(summary = "Fetches total revenue", description = "Calculates and returns the total revenue")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @GetMapping("/totalRevenue")
    @SecurityRequirement(name = "basicAuth")
    public ResponseEntity<Double> getTotalRevenue() {
        log.info("Calculating total revenue");
        return new ResponseEntity<>(productService.getTotalRevenue(), HttpStatus.OK);
    }

    @Operation(summary = "Fetches revenue by product", description = "Calculates revenue generated by a specific product")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @GetMapping("/{id}/revenue")
    @SecurityRequirement(name = "basicAuth")
    public ResponseEntity<Double> getRevenueByProduct(@PathVariable Long id) {
        log.info("Calculating revenue for product ID: {}", id);
        return new ResponseEntity<>(productService.getRevenueByProduct(id), HttpStatus.OK);
    }

    @Operation(summary = "Adds a sale", description = "Registers a sale for a product")
    @ApiResponse(responseCode = "201", description = "HTTP Status 201 CREATED")
    @PostMapping("/sales")
    @SecurityRequirement(name = "basicAuth")
    public ResponseEntity<String> addSale(@Valid @RequestBody SaleDto saleDto) {
        log.info("Registering sale: {}", saleDto);
        productService.addSale(saleDto);
        log.info("Sale registered successfully.");
        return ResponseEntity.status(HttpStatus.CREATED).body("Sale registered successfully.");
    }

    @Operation(summary = "Downloads products PDF", description = "Generates and downloads a PDF of all products")
    @ApiResponse(responseCode = "200", description = "HTTP Status 200 SUCCESS")
    @GetMapping("/pdf")
    @SecurityRequirement(name = "basicAuth")
    public ResponseEntity<byte[]> downloadProductPdf(HttpServletResponse response) throws IOException {
        log.info("Generating product PDF.");
        return ResponseEntity.ok().header("Content-Type", "application/pdf")
                .header("Content-Disposition", "attachment; filename=product_list.pdf")
                .body(productPdfService.generateProductPdf(response));
    }

}
